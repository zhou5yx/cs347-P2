{"remainingRequest":"/Users/brendanarmani/sp19/347/projects/p2/p2-angular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/brendanarmani/sp19/347/projects/p2/p2-angular/node_modules/@angular/material/esm5/progress-bar.es5.js","dependencies":[{"path":"/Users/brendanarmani/sp19/347/projects/p2/p2-angular/node_modules/@angular/material/esm5/progress-bar.es5.js","mtime":499162500000},{"path":"/Users/brendanarmani/sp19/347/projects/p2/p2-angular/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brendanarmani/sp19/347/projects/p2/p2-angular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START tslib,_angular_core,_angular_platform_browser_animations,_angular_material_core,_angular_common PURE_IMPORTS_END */\nimport { __extends } from 'tslib';\nimport { Component, ChangeDetectionStrategy, ElementRef, Inject, Input, Optional, ViewEncapsulation, InjectionToken, inject, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@docs-private\n */\nvar /**\n * \\@docs-private\n */ MatProgressBarBase = /** @class */ /*@__PURE__*/ (function () {\n    function MatProgressBarBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatProgressBarBase;\n}());\nvar /** @type {?} */ _MatProgressBarMixinBase = /*@__PURE__*/ mixinColor(MatProgressBarBase, 'primary');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n */\nvar /** @type {?} */ MAT_PROGRESS_BAR_LOCATION = /*@__PURE__*/ new InjectionToken('mat-progress-bar-location', { providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY });\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n    var /** @type {?} */ _document = inject(DOCUMENT);\n    var /** @type {?} */ pathname = (_document && _document.location && _document.location.pathname) || '';\n    return { pathname: pathname };\n}\n/**\n * Counter used to generate unique IDs for progress bars.\n */\nvar /** @type {?} */ progressbarId = 0;\n/**\n * `<mat-progress-bar>` component.\n */\nvar MatProgressBar = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatProgressBar, _super);\n    function MatProgressBar(_elementRef, _animationMode, /**\n                   * @deprecated `location` parameter to be made required.\n                   * @breaking-change 8.0.0\n                   */ location) {\n        var _this = _super.call(this, _elementRef) || this;\n        _this._elementRef = _elementRef;\n        _this._animationMode = _animationMode;\n        _this._value = 0;\n        _this._bufferValue = 0;\n        /**\n         * Mode of the progress bar.\n         *\n         * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n         * 'determinate'.\n         * Mirrored to mode attribute.\n         */\n        _this.mode = 'determinate';\n        /**\n         * ID of the progress bar.\n         */\n        _this.progressbarId = \"mat-progress-bar-\" + progressbarId++;\n        // We need to prefix the SVG reference with the current path, otherwise they won't work\n        // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n        // because named route URLs can contain parentheses (see #12338). Also we don't use\n        // `Location` from `@angular/common` since we can't tell the difference between whether\n        // the consumer is using the hash location strategy or not, because `Location` normalizes\n        // both `/#/foo/bar` and `/foo/bar` to the same thing.\n        var /** @type {?} */ path = location && location.pathname ? location.pathname.split('#')[0] : '';\n        _this._rectangleFillValue = \"url('\" + path + \"#\" + _this.progressbarId + \"')\";\n        return _this;\n    }\n    Object.defineProperty(MatProgressBar.prototype, \"value\", {\n        get: /**\n         * Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow.\n         * @return {?}\n         */ function () { return this._value; },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */ function (v) { this._value = clamp(v || 0); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatProgressBar.prototype, \"bufferValue\", {\n        get: /**\n         * Buffer value of the progress bar. Defaults to zero.\n         * @return {?}\n         */ function () { return this._bufferValue; },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */ function (v) { this._bufferValue = clamp(v || 0); },\n        enumerable: true,\n        configurable: true\n    });\n    /** Gets the current transform value for the progress bar's primary indicator. */\n    /**\n     * Gets the current transform value for the progress bar's primary indicator.\n     * @return {?}\n     */\n    MatProgressBar.prototype._primaryTransform = /**\n     * Gets the current transform value for the progress bar's primary indicator.\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ scale = this.value / 100;\n            return { transform: \"scaleX(\" + scale + \")\" };\n        };\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     */\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     * @return {?}\n     */\n    MatProgressBar.prototype._bufferTransform = /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     * @return {?}\n     */\n        function () {\n            if (this.mode === 'buffer') {\n                var /** @type {?} */ scale = this.bufferValue / 100;\n                return { transform: \"scaleX(\" + scale + \")\" };\n            }\n        };\n    return MatProgressBar;\n}(_MatProgressBarMixinBase));\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v, min, max) {\n    if (min === void 0) {\n        min = 0;\n    }\n    if (max === void 0) {\n        max = 100;\n    }\n    return Math.max(min, Math.min(max, v));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatProgressBarModule = /** @class */ /*@__PURE__*/ (function () {\n    function MatProgressBarModule() {\n    }\n    return MatProgressBarModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { MatProgressBarModule, MatProgressBarBase, _MatProgressBarMixinBase, MAT_PROGRESS_BAR_LOCATION, MAT_PROGRESS_BAR_LOCATION_FACTORY, MatProgressBar };\n//# sourceMappingURL=progress-bar.es5.js.map\n",null]}